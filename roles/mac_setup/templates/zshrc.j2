# Enable Powerlevel10k instant prompt
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Oh My Zsh Configuration
export ZSH="$HOME/.oh-my-zsh"
ZSH_THEME="powerlevel10k/powerlevel10k"

# Plugins
plugins=(
  git gitfast git-extras git-flow docker kubectl terraform aws
  zsh-completions zsh-autosuggestions zsh-syntax-highlighting
  fast-syntax-highlighting autojump tmux fzf extract
  history-substring-search z asdf direnv ripgrep fd gh
  ansible helm kube-ps1 kubectx
)

source $ZSH/oh-my-zsh.sh

# Environment Variables
export PATH=$HOME/bin:$HOME/.local/bin:$HOME/go/bin:/usr/local/bin:$PATH
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export ARCHFLAGS="-arch $(uname -m)"
export EDITOR='nvim'
[[ -n $SSH_CONNECTION ]] && export EDITOR='vim'

# Git Configuration
export GIT_MERGE_AUTOEDIT=no
export GIT_DISCOVERY_ACROSS_FILESYSTEM=1

# AWS Configuration
export AWS_VAULT_BACKEND="file"

# NVM Configuration
export NVM_LAZY_LOAD=true
export NVM_COMPLETION=true

# FZF Configuration
export FZF_DEFAULT_OPTS="
  --color=bg+:#414559,bg:#303446,spinner:#f2d5cf,hl:#e78284
  --color=fg:#c6d0f5,header:#e78284,info:#ca9ee6,pointer:#f2d5cf
  --color=marker:#f2d5cf,fg+:#c6d0f5,prompt:#ca9ee6,hl+:#e78284
  --height 40% --layout=reverse --border
"
export FZF_CTRL_T_OPTS="
  --preview 'if file -i {}|grep -q binary; then
               echo {} is a binary file;
             elif [[ -f {} ]]; then
               bat --style=numbers --color=always --line-range :500 {};
             else
               ls -l {};
             fi'
  --preview-window=right:60%:wrap
"
export FZF_CTRL_R_OPTS="
  --preview 'echo {}'
  --preview-window=down:3:hidden:wrap
  --bind '?:toggle-preview'
"
export FZF_ALT_C_OPTS="
  --preview 'tree -C {} | head -200'
  --preview-window=right:60%:wrap
"

# Aliases
alias zshconfig="$EDITOR ~/.zshrc"
alias ohmyzsh="cd ~/.oh-my-zsh"

# Kubernetes aliases
alias k="kubectl"
alias kns="kubens"
alias kctx="kubectx"

# Docker aliases
alias d="docker"
alias dkps="docker ps"
alias dkst="docker stats"
alias dkpsa="docker ps -a"
alias dkimgs="docker images"
alias dkcpup="docker compose up -d"
alias dkcpdown="docker compose down"
alias dkcpstart="docker compose start"
alias dkcpstop="docker compose stop"

# Git aliases
alias gits="git status"
alias gitd="git diff"
alias gitl="git log --oneline --graph --decorate"
alias gita="git add ."
alias gitc="git cz"
alias gs='git status'
alias ga='git add'
alias gaa='git add --all'
alias gc='git commit -v'
alias gca='git commit -v -a'
alias gcam='git commit -a -m'
alias gco='git checkout'
alias gcb='git checkout -b'
alias gd='git diff'
alias gds='git diff --staged'
alias gl='git pull'
alias gp='git push'
alias glog='git log --oneline --decorate --graph'
alias gloga='git log --oneline --decorate --graph --all'
alias grhh='git reset --hard HEAD'
alias gclean='git clean -fd'
alias gwip='git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit --no-verify --no-gpg-sign -m "--wip-- [skip ci]"'
alias gbr='git branch | fzf-tmux -d 15 | xargs git checkout'
alias gbrm='git branch | fzf-tmux -d 15 | xargs git branch -D'

# AWS aliases
alias av="aws-vault"
alias avl="aws-vault list"

# Other aliases
alias tf="terraform"
alias ls="exa --git"
alias ll="exa -l --git"
alias la="exa -la --git"
alias tree="exa --tree --git"
alias ip="ipconfig getifaddr en0"
alias vim="nvim"
alias grep="rg"
alias cat="bat"
alias top="htop"
alias du="dust"
alias ping="prettyping --nolegend"
alias dig="dog"
alias http="xh"
alias curl="curlie"
alias help="tldr"

# GitHub CLI aliases
if command -v gh &> /dev/null; then
  alias ghpr='gh pr create'
  alias ghprl='gh pr list'
  alias ghprv='gh pr view'
  alias ghprc='gh pr checkout'
  alias ghis='gh issue create'
  alias ghisl='gh issue list'
  alias ghisv='gh issue view'
fi

# Functions

# Git functions
function gfetch() {
  git fetch --all --prune
  git branch -vv | grep ': gone]' | awk '{print $1}' | xargs git branch -D
}

function gswitch() {
  local branches branch
  branches=$(git branch -a) &&
  branch=$(echo "$branches" | fzf +s +m -e) &&
  git checkout $(echo "$branch" | sed "s:.* remotes/origin/::" | sed "s:.* ::")
}

function gshow() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
      --bind "ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                {}
FZF-EOF"
}

function gstash() {
  local out q k sha
  while out=$(
    git stash list --pretty="%C(yellow)%h %>(14)%Cgreen%cr %C(blue)%gs" |
    fzf --ansi --no-sort --query="$q" --print-query \
        --expect=ctrl-d,ctrl-b);
  do
    mapfile -t out <<< "$out"
    q="${out[0]}"
    k="${out[1]}"
    sha="${out[-1]}"
    sha="${sha%% *}"
    [[ -z "$sha" ]] && continue
    if [[ "$k" == 'ctrl-d' ]]; then
      git diff $sha
    elif [[ "$k" == 'ctrl-b' ]]; then
      git stash branch "stash-$sha" $sha
      break;
    else
      git stash show -p $sha
    fi
  done
}

# Code search function
function codesearch() {
  rg --color=always --line-number --no-heading --smart-case "${*:-}" |
    fzf --ansi \
        --color "hl:-1:underline,hl+:-1:underline:reverse" \
        --delimiter : \
        --preview 'bat --style=numbers --color=always --highlight-line {2} {1}' \
        --preview-window 'up,60%,border-bottom,+{2}+3/3,~3'
}

# AWS functions
function av-add() { aws-vault add "$1" }
function av-list() { aws-vault list }
function av-exec() {
  local profile=$(aws-vault list --profiles | fzf --prompt="Select AWS Profile: ")
  [[ -n "$profile" ]] && aws-vault exec "$profile" -- "$@"
}
function av-switch() {
  local profile=$(aws-vault list --profiles | fzf --prompt="Select AWS Profile: ")
  if [[ -n "$profile" ]]; then
    eval $(aws-vault exec "$profile" -- env | grep AWS | sed 's/^/export /')
    echo "Switched to AWS profile: $profile"
  fi
}
function av-creds() {
  local profile=$(aws-vault list --profiles | fzf --prompt="Select AWS Profile: ")
  [[ -n "$profile" ]] && aws-vault exec "$profile" -- env | grep AWS
}

# Kubernetes functions
function k-switch-context() { kubectx | fzf --prompt="Select Kubernetes Context: " | xargs kubectx }
function k-switch-namespace() { kubens | fzf --prompt="Select Kubernetes Namespace: " | xargs kubens }
function k-get-pods() { kubectl get pods | fzf --multi --header-lines=1 --prompt="Select Pod(s): " | awk '{print $1}' }
function k-describe-pod() {
  local pod=$(k-get-pods)
  [[ -n "$pod" ]] && kubectl describe pod "$pod"
}
function k-logs() {
  local pod=$(k-get-pods)
  [[ -n "$pod" ]] && kubectl logs -f "$pod"
}
function k-exec() {
  local pod=$(k-get-pods)
  [[ -n "$pod" ]] && kubectl exec -it "$pod" -- /bin/sh
}
function k-port-forward() {
  local pod=$(k-get-pods)
  if [[ -n "$pod" ]]; then
    read "port?Enter port to forward (local:remote): "
    kubectl port-forward "$pod" "$port"
  fi
}

# Refined Interactive Kubernetes Pod Management Function
function k-pod-manage() {
  local namespace=$(kubens | fzf --prompt="Select Namespace: ")
  if [[ -z "$namespace" ]]; then
    echo "No namespace selected. Exiting."
    return 1
  fi

  local header_lines=2
  local preview_cmd="kubectl describe pod {1} -n $namespace"
  local legend=":: d-Describe | l-Logs | s-Shell | p-PortForward | k-Kill | r-Refresh | q-Quit ::"

  while true; do
    local selection=$(kubectl get pods -n "$namespace" -o wide |
      fzf --header-lines=$header_lines \
          --preview "$preview_cmd" \
          --preview-window=down:70% \
          --header "$legend" \
          --bind "d:execute($preview_cmd | less > /dev/tty)" \
          --bind "l:execute(kubectl logs {1} -n $namespace | less > /dev/tty)" \
          --bind "s:execute(kubectl exec -it {1} -n $namespace -- /bin/sh > /dev/tty)" \
          --bind "p:execute(echo 'Enter port (local:remote):' && read port && kubectl port-forward {1} \$port -n $namespace > /dev/tty < /dev/tty)" \
          --bind "k:execute(kubectl delete pod {1} -n $namespace > /dev/tty)" \
          --bind "r:reload(kubectl get pods -n $namespace -o wide)" \
          --bind "q:abort" \
          --height 100% \
          --layout reverse \
          --info inline \
          --prompt "Select Pod: " \
          --pointer "â–¶" \
          --no-mouse)

    if [[ -z "$selection" ]]; then
      echo "No pod selected or action aborted. Exiting."
      break
    fi

    local pod_name=$(echo "$selection" | awk '{print $1}')
    echo "Selected pod: $pod_name"
    echo "Press any key to continue..."
    read -k1 -s
  done
}

# Alias for quick access
alias kpm="k-pod-manage"

# AWS EKS functions
function get-eks-token() {
  local profile=$(aws-vault list --profiles | fzf --prompt="Select AWS Profile for EKS: ")
  [[ -n "$profile" ]] && aws-vault exec "$profile" -- aws eks get-token --cluster-name $(kubectl config current-context) | jq -r '.status.token'
}
function update-kubeconfig-eks() {
  local profile=$(aws-vault list --profiles | fzf --prompt="Select AWS Profile for EKS: ")
  if [[ -n "$profile" ]]; then
    read "cluster?Enter EKS cluster name: "
    aws-vault exec "$profile" -- aws eks update-kubeconfig --name "$cluster"
  fi
}
function switch-aws-k8s() {
  local profile=$(aws-vault list --profiles | fzf --prompt="Select AWS Profile: ")
  if [[ -n "$profile" ]]; then
    eval $(aws-vault exec "$profile" -- env | grep AWS | sed 's/^/export /')
    echo "Switched to AWS profile: $profile"
    update-kubeconfig-eks
  fi
}

# Utility functions
function vmrss() {
    if [ $# -eq 0 ]; then
        echo "Usage: vmrss <PID>"
    else
        rss_kb=$(ps -o rss= -p $1)
        if [ "$rss_kb" -eq 0 ]; then
            echo "No such process or no memory usage information available"
        elif [ "$rss_kb" -lt 1024 ]; then
            echo "${rss_kb} KB"
        else
            rss_mb=$((rss_kb / 1024))
            echo "${rss_mb} MB"
        fi
    fi
}
function mkcd() { mkdir -p "$@" && cd "$_" }
function hg() { history | grep "$1" }
function killport() { lsof -ti tcp:$1 | xargs kill }
function weather() { curl wttr.in/$1 }
function genpass() { openssl rand -base64 ${1:-12} }
function timezsh() {
  shell=${1-$SHELL}
  for i in $(seq 1 10); do /usr/bin/time $shell -i -c exit; done
}

# Tool Initializations
. $HOME/.asdf/asdf.sh
eval "$(direnv hook zsh)"
eval "$(starship init zsh)"

# Autocompletions
source <(kubectl completion zsh)
source <(helm completion zsh)
autoload bashcompinit && bashcompinit
autoload -Uz compinit && compinit
complete -C '/usr/local/bin/aws_completer' aws
complete -o nospace -C /usr/local/bin/terraform terraform

# Kubectl prompt configuration
KUBE_PS1_SYMBOL_ENABLE=false
kubeon

# FZF
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Load sensitive environment variables
[ -f ~/.env ] && source ~/.env

# Enable zsh-autosuggestions
[ -f /usr/local/share/zsh-autosuggestions/zsh-autosuggestions.zsh ] && source /usr/local/share/zsh-autosuggestions/zsh-autosuggestions.zsh

# Enable zsh-syntax-highlighting (should be at the end of .zshrc)
[ -f /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ] && source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# Load Powerlevel10k configuration
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# Performance optimizations
zmodload zsh/zprof