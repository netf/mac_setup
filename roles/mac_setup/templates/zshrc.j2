# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load
ZSH_THEME="powerlevel10k/powerlevel10k"

# Plugins
plugins=(
  git
  gitfast
  git-extras
  git-flow
  docker
  kubectl
  terraform
  aws
  zsh-completions
  zsh-autosuggestions
  zsh-syntax-highlighting
  fast-syntax-highlighting
  autojump
  tmux
  fzf
  extract
  history-substring-search
  z
  asdf
  direnv
  ripgrep
  fd
  gh
  ansible
  helm
  kube-ps1
  kubectx
)

source $ZSH/oh-my-zsh.sh

# User configuration
export PATH=$HOME/bin:$HOME/.local/bin:$HOME/go/bin:/usr/local/bin:$PATH

# Language environment
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='vim'
else
  export EDITOR='nvim'
fi

# Compilation flags
export ARCHFLAGS="-arch $(uname -m)"

# Aliases
alias zshconfig="$EDITOR ~/.zshrc"
alias ohmyzsh="cd ~/.oh-my-zsh"
alias k="kubectl"
alias tf="terraform"
alias d="docker"
alias ls="exa --git --icons"
alias ll="exa -l --git --icons"
alias la="exa -la --git --icons"
alias ip="ipconfig getifaddr en0"
alias vim="nvim"
alias grep="rg"
alias cat="bat"
alias top="htop"
alias du="dust"
alias ping="prettyping --nolegend"
alias dig="dog"
alias http="xh"
alias curl="curlie"
alias help="tldr"
alias gits="git status"
alias gitd="git diff"
alias gitl="git log --oneline --graph --decorate"
alias gita="git add ."
alias gitc="git cz"
alias dkps="docker ps"
alias dkst="docker stats"
alias dkpsa="docker ps -a"
alias dkimgs="docker images"
alias dkcpup="docker compose up -d"
alias dkcpdown="docker compose down"
alias dkcpstart="docker compose start"
alias dkcpstop="docker compose stop"

# Git-specific aliases
alias gs='git status'
alias ga='git add'
alias gaa='git add --all'
alias gc='git commit -v'
alias gca='git commit -v -a'
alias gcam='git commit -a -m'
alias gco='git checkout'
alias gcb='git checkout -b'
alias gd='git diff'
alias gds='git diff --staged'
alias gl='git pull'
alias gp='git push'
alias glog='git log --oneline --decorate --graph'
alias gloga='git log --oneline --decorate --graph --all'
alias grhh='git reset --hard HEAD'
alias gclean='git clean -fd'
alias gwip='git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit --no-verify --no-gpg-sign -m "--wip-- [skip ci]"'

# Advanced Git functions
function gfetch() {
  git fetch --all --prune
  git branch -vv | grep ': gone]' | awk '{print $1}' | xargs git branch -D
}

function gswitch() {
  local branches branch
  branches=$(git branch -a) &&
  branch=$(echo "$branches" | fzf +s +m -e) &&
  git checkout $(echo "$branch" | sed "s:.* remotes/origin/::" | sed "s:.* ::")
}

function gshow() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
      --bind "ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                {}
FZF-EOF"
}

function gstash() {
  local out q k sha
  while out=$(
    git stash list --pretty="%C(yellow)%h %>(14)%Cgreen%cr %C(blue)%gs" |
    fzf --ansi --no-sort --query="$q" --print-query \
        --expect=ctrl-d,ctrl-b);
  do
    mapfile -t out <<< "$out"
    q="${out[0]}"
    k="${out[1]}"
    sha="${out[-1]}"
    sha="${sha%% *}"
    [[ -z "$sha" ]] && continue
    if [[ "$k" == 'ctrl-d' ]]; then
      git diff $sha
    elif [[ "$k" == 'ctrl-b' ]]; then
      git stash branch "stash-$sha" $sha
      break;
    else
      git stash show -p $sha
    fi
  done
}

# Code search function
function codesearch() {
  rg --color=always --line-number --no-heading --smart-case "${*:-}" |
    fzf --ansi \
        --color "hl:-1:underline,hl+:-1:underline:reverse" \
        --delimiter : \
        --preview 'bat --style=numbers --color=always --highlight-line {2} {1}' \
        --preview-window 'up,60%,border-bottom,+{2}+3/3,~3'
}

# GitHub CLI aliases (if gh is installed)
if command -v gh &> /dev/null; then
  alias ghpr='gh pr create'
  alias ghprl='gh pr list'
  alias ghprv='gh pr view'
  alias ghprc='gh pr checkout'
  alias ghis='gh issue create'
  alias ghisl='gh issue list'
  alias ghisv='gh issue view'
fi


# Git branch management
alias gbr='git branch | fzf-tmux -d 15 | xargs git checkout'
alias gbrm='git branch | fzf-tmux -d 15 | xargs git branch -D'

# Git-specific environment variables
export GIT_MERGE_AUTOEDIT=no

# Performance optimizations for large repositories
export GIT_DISCOVERY_ACROSS_FILESYSTEM=1

# Use delta for better git diffs if installed
if command -v delta &> /dev/null; then
  git config --global core.pager "delta --dark"
  git config --global interactive.diffFilter "delta --color-only"
fi

# Lazy-load nvm for faster shell startup
export NVM_LAZY_LOAD=true
export NVM_COMPLETION=true

# asdf version manager
. $HOME/.asdf/asdf.sh
fpath=(${ASDF_DIR}/completions $fpath)

# direnv
eval "$(direnv hook zsh)"

# Starship prompt
eval "$(starship init zsh)"

# Kubectl autocomplete and prompt
source <(kubectl completion zsh)
KUBE_PS1_SYMBOL_ENABLE=false
kubeon

# FZF
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export FZF_DEFAULT_OPTS="--height 40% --layout=reverse --border"

# Improved file preview
export FZF_CTRL_T_OPTS="
  --preview 'if file -i {}|grep -q binary; then
               echo {} is a binary file;
             elif [[ -f {} ]]; then
               bat --style=numbers --color=always --line-range :500 {};
             else
               ls -l {};
             fi'
  --preview-window=right:60%:wrap
"

# Improved history search
export FZF_CTRL_R_OPTS="
  --preview 'echo {}'
  --preview-window=down:3:hidden:wrap
  --bind '?:toggle-preview'
"

# Improved directory navigation
export FZF_ALT_C_OPTS="
  --preview 'tree -C {} | head -200'
  --preview-window=right:60%:wrap
"

# Custom functions
vmrss() {
    if [ $# -eq 0 ]; then
        echo "Usage: vmrss <PID>"
    else
        rss_kb=$(ps -o rss= -p $1)
        if [ "$rss_kb" -eq 0 ]; then
            echo "No such process or no memory usage information available"
        elif [ "$rss_kb" -lt 1024 ]; then
            echo "${rss_kb} KB"
        else
            rss_mb=$((rss_kb / 1024))
            echo "${rss_mb} MB"
        fi
    fi
}

# Function to create a new directory and enter it
mkcd() {
  mkdir -p "$@" && cd "$_"
}

# Function to search history
hg() {
  history | grep "$1"
}

# Function to kill processes listening on specified port
killport() {
  lsof -ti tcp:$1 | xargs kill
}

# Function to get weather information
weather() {
  curl wttr.in/$1
}

# Function to generate a secure password
genpass() {
  openssl rand -base64 ${1:-12}
}

# Function to benchmark shell startup time
timezsh() {
  shell=${1-$SHELL}
  for i in $(seq 1 10); do /usr/bin/time $shell -i -c exit; done
}

# Load sensitive environment variables
if [ -f ~/.env ]; then
    source ~/.env
fi

# Enable zsh-autosuggestions
if [ -f /usr/local/share/zsh-autosuggestions/zsh-autosuggestions.zsh ]; then
    source /usr/local/share/zsh-autosuggestions/zsh-autosuggestions.zsh
fi

# Enable zsh-syntax-highlighting (should be at the end of .zshrc)
if [ -f /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]; then
    source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# Performance optimizations
zmodload zsh/zprof