---
- name: Comprehensive GPG Setup
  block:
    - name: Ensure GPG is installed
      homebrew:
        name: gnupg
        state: present

    - name: Ensure GPG directory exists
      file:
        path: "{{ ansible_env.HOME }}/.gnupg"
        state: directory
        mode: '0700'

    - name: Configure GPG agent
      template:
        src: gpg-agent.conf.j2
        dest: "{{ ansible_env.HOME }}/.gnupg/gpg-agent.conf"
        mode: '0600'

    - name: Install pinentry-mac
      homebrew:
        name: pinentry-mac
        state: present

    - name: Configure GPG
      template:
        src: gpg.conf.j2
        dest: "{{ ansible_env.HOME }}/.gnupg/gpg.conf"
        mode: '0600'

    - name: Create GPG key generation configuration file
      template:
        src: gpg_gen_key.conf.j2
        dest: "{{ ansible_env.HOME }}/.gnupg/gpg_gen_key.conf"
        mode: '0600'

    - name: Generate GPG key
      shell: |
        gpg --batch --generate-key {{ ansible_env.HOME }}/.gnupg/gpg_gen_key.conf
      args:
        creates: "{{ ansible_env.HOME }}/.gnupg/trustdb.gpg"
      environment:
        GNUPGHOME: "{{ ansible_env.HOME }}/.gnupg"

    - name: Remove GPG key generation configuration file
      file:
        path: "{{ ansible_env.HOME }}/.gnupg/gpg_gen_key.conf"
        state: absent

    - name: Get GPG key ID
      shell: gpg --list-secret-keys --keyid-format LONG | grep sec | awk '{print $2}' | awk -F'/' '{print $2}'
      register: gpg_key_id
      changed_when: false

    - name: Configure Git to use GPG
      git_config:
        name: "{{ item.name }}"
        scope: global
        value: "{{ item.value }}"
      loop:
        - { name: 'user.signingkey', value: '{{ gpg_key_id.stdout }}' }
        - { name: 'commit.gpgsign', value: 'true' }
        - { name: 'tag.gpgsign', value: 'true' }

    - name: Ensure GitHub CLI is installed
      homebrew:
        name: gh
        state: present

    - name: Check GitHub CLI authentication status
      command: gh auth status
      register: gh_auth_status
      changed_when: false
      failed_when: false

    - name: Authenticate GitHub CLI if not already authenticated
      command: gh auth login -h github.com -p https -w
      when: gh_auth_status.rc != 0

    - name: Export public GPG key
      shell: gpg --armor --export {{ gpg_key_id.stdout }}
      register: gpg_public_key
      changed_when: false

    - name: Check if GPG key already exists on GitHub
      command: gh gpg-key list
      register: gh_gpg_keys
      changed_when: false

    - name: Add GPG key to GitHub
      shell: |
        echo "{{ gpg_public_key.stdout }}" | gh gpg-key add -
      register: gh_add_gpg_key
      changed_when: gh_add_gpg_key.rc == 0
      failed_when:
        - gh_add_gpg_key.rc != 0
        - '"already exists" not in gh_add_gpg_key.stderr'
      when: gpg_key_id.stdout not in gh_gpg_keys.stdout

    - name: Add GPG configuration to .zshrc
      blockinfile:
        path: "{{ ansible_env.HOME }}/.zshrc"
        block: |
          export GPG_TTY=$(tty)
          gpgconf --launch gpg-agent

  rescue:
    - name: Display error message
      debug:
        msg: "GPG setup failed. Please check the error messages and try again."

  always:
    - name: Ensure .gnupg directory has correct permissions
      file:
        path: "{{ ansible_env.HOME }}/.gnupg"
        state: directory
        mode: '0700'
        owner: "{{ ansible_env.USER }}"